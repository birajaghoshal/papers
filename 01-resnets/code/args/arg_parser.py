import argparse
import json
import os
import torch.cuda


class ArgParser(object):
    def __init__(self):
        self.parser = argparse.ArgumentParser(description='Filter Discriminator')
        self.parser.add_argument('--batch_size', type=int, default=64,
                                 help='Batch size.')
        self.parser.add_argument('--depth', type=int, default=29, help='Model depth.')
        self.parser.add_argument('--cardinality', type=int, default=8, help='Model cardinality (ResNeXt).')
        self.parser.add_argument('--base_width', type=int, default=64, help='Number of channels in each group.')
        self.parser.add_argument('--widen_factor', type=int, default=4, help='Widen factor: 4 -> 64, 8 -> 128, etc.')
        self.parser.add_argument('--model', type=str, default='ResNet',
                                 choices=('ResNet', 'DenseNet', 'ResNeXt', 'SEResNeXt'),
                                 help='If non-empty, train the specified model.')
        self.parser.add_argument('--ckpt_path', type=str, default='',
                                 help='Path from which to load checkpoint.')
        self.parser.add_argument('--gpu_ids', type=str, default='0',
                                 help='Comma-separated list of IDs for GPUs to use.')
        self.parser.add_argument('--iters_per_print', type=int, default=512,
                                 help='Iterations between printing to the console.')
        self.parser.add_argument('--iters_per_visual', type=int, default=2048,
                                 help='Iterations between showing an example in TensorBoard.')
        self.parser.add_argument('--learning_rate', type=float, default=0.1,
                                 help='Initial learning rate.')
        self.parser.add_argument('--lr_decay_gamma', type=float, default=0.1,
                                 help='Multiply learning rate by this value every lr_decay_step epochs.')
        self.parser.add_argument('--lr_decay_step', type=int, default=125,
                                 help='Number of epochs between each multiply-by-gamma step.')
        self.parser.add_argument('--log_dir', type=str, default='logs',
                                 help='Directory for logs generated by TensorBoard.')
        self.parser.add_argument('--name', type=str, required=True, help='Name for experiment.')
        self.parser.add_argument('--num_workers', type=int, default=4,
                                 help='Number of worker thread per data loader.')
        self.parser.add_argument('--num_epochs', type=int, default=300,
                                 help='Number of epochs to train for. If 0, train forever.')
        self.parser.add_argument('--num_labels', type=int, default=10,
                                 help='Number of labels (classes) in the dataset.')
        self.parser.add_argument('--num_visuals', type=int, default=4, help='Maximum number of visuals per batch.')
        self.parser.add_argument('--max_ckpts', type=int, default=-1, help='Maximum number of checkpoints to keep.')
        self.parser.add_argument('--save_epochs', type=str, default='1,10,20,30',
                                 help='Comma-separated list of epochs after which to save a checkpoint.')
        self.parser.add_argument('--save_dir', type=str, default='ckpts/',
                                 help='Directory for saving model checkpoints.')
        self.parser.add_argument('--sgd_momentum', type=float, default=0.9, help='Momentum for SGD.')
        self.parser.add_argument('--use_pre_activation', action='store_true',
                                 help='If set, use pre-activation order in residual blocks.')
        self.parser.add_argument('--weight_decay', type=float, default=5e-4,
                                 help='Weight decay (i.e., L2 regularization factor).')

    def parse_args(self):
        args = self.parser.parse_args()

        # Set up additional arguments
        args.gpu_ids = [int(i) for i in str(args.gpu_ids).split(',') if int(i) >= 0]
        args.device = 'cuda' if len(args.gpu_ids) > 0 and torch.cuda.is_available() else 'cpu'
        if len(args.gpu_ids) > 0:
            torch.cuda.set_device(args.gpu_ids[0])
        args.save_epochs = [int(i) for i in str(args.save_epochs).split(',') if int(i) >= 0]

        # Dump arguments to a JSON file
        args.save_dir = os.path.join(args.save_dir, args.name)
        os.makedirs(args.save_dir, exist_ok=True)
        with open(os.path.join(args.save_dir, 'args.json'), 'w') as fh:
            json.dump(vars(args), fh, indent=4, sort_keys=True)
            fh.write('\n')

        return args
